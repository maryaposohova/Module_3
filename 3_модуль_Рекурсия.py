
# def summa(n):
#     if n ==0:  # функция будет вызывать саму себя, о станавливаться, когда параметр n будет == 0
#         return 0  # соответственно здесь используем оператор ретёрн для выхода из функции и вернет нам 0
#     else:  #  но во всех остальных случаях, когда параметр не равен 0:
#         return n + summa(n - 1)  #  мы будем добавлять вызов функции, но с параметром, когторый меньше на 1
#
#
# print(summa(5))  # 15

# Работа со списком
#  Создадим пирамидку с помощью append
stack = []    # создали пустой список
stack.append(1)  #Берем наш стэк и добавляем в него единичку
print("Добавили элемент", stack)
stack.append(2)
print("Добавили элемент", stack)
stack.append(3)
print("Добавили элемент", stack)
#  Получилась пирамидка, и стобы ее разобрать, используем pop. Здесь не надо передавать никаких параметров
stack.pop()  # он будет возвращать последний элемент
print("Убрали элемент", stack)
stack.pop()  # он будет возвращать последний элемент
print("Убрали элемент", stack)
stack.pop()  # он будет возвращать последний элемент
print("Убрали элемент", stack)
print("Добавили элемент", stack)
stack.append(3)


'''2023/10/09 00:00|Самостоятельная работа по уроку "Рекурсия"
Цель: применить знания о рекурсии в решении задачи.

Задача "Рекурсивное умножение цифр":


'''
def get_multiplied_digits(number):
    str_number = str(number)
    first = int(str_number[0])
    if len(str_number) > 1:
        return first * get_multiplied_digits(int(str_number[1:]))
    if len(str_number) == 1:
        return first


result = get_multiplied_digits(40203)
print( result)